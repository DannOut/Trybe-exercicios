{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Trybe-exercicios/2.Front-End/11.1-components-state-_-events/learning2/src/App.jsx\";\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    /* Para definir um estado inicial ao componente, a ser definido\n    no momento em que o componente for colocado na tela, faça uma atribuição\n    de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      numeroDeCliques: 0,\n      diminuindoCliques: 100\n    };\n  }\n\n  handleClick() {\n    /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n    ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n    React*/\n    //------------------------------------------//\n\n    /* Passando uma callback à função setState, que recebe de parâmetros\n    o estado anterior e as props do componente, você garante que as atualizações\n    do estado acontecerão uma depois da outra! */\n    this.setState((estadoAnterior, _props) => ({\n      numeroDeCliques: estadoAnterior.numeroDeCliques + 1,\n      diminuindoCliques: estadoAnterior.diminuindoCliques - 1\n    }));\n  }\n\n  render() {\n    /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick,\n        children: [' ', this.state.numeroDeCliques]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick,\n        children: [' ', this.state.diminuindoCliques, ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","App","constructor","handleClick","bind","state","numeroDeCliques","diminuindoCliques","setState","estadoAnterior","_props","render"],"sources":["/home/daniel/Trybe-exercicios/2.Front-End/11.1-components-state-_-events/learning2/src/App.jsx"],"sourcesContent":["import { Component } from 'react';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    /* Para definir um estado inicial ao componente, a ser definido\n    no momento em que o componente for colocado na tela, faça uma atribuição\n    de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      numeroDeCliques: 0,\n      diminuindoCliques: 100,\n    };\n  }\n\n  handleClick() {\n    /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n    ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n    React*/\n    //------------------------------------------//\n    /* Passando uma callback à função setState, que recebe de parâmetros\n    o estado anterior e as props do componente, você garante que as atualizações\n    do estado acontecerão uma depois da outra! */\n    this.setState((estadoAnterior, _props) => ({\n      numeroDeCliques: estadoAnterior.numeroDeCliques + 1,\n      diminuindoCliques: estadoAnterior.diminuindoCliques - 1,\n    }));\n  }\n\n  render() {\n    /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n    return (\n      <div>\n        {' '}\n        <button onClick={this.handleClick}>\n          {' '}\n          {this.state.numeroDeCliques}\n        </button>\n        <button onClick={this.handleClick}>\n          {' '}\n          {this.state.diminuindoCliques}{' '}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;EAC1BE,WAAW,GAAG;IACZ;IAEA;AACJ;AACA;;IACI,KAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;IAEA,KAAKC,KAAL,GAAa;MACXC,eAAe,EAAE,CADN;MAEXC,iBAAiB,EAAE;IAFR,CAAb;EAID;;EAEDJ,WAAW,GAAG;IACZ;AACJ;AACA;IACI;;IACA;AACJ;AACA;IACI,KAAKK,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;MACzCJ,eAAe,EAAEG,cAAc,CAACH,eAAf,GAAiC,CADT;MAEzCC,iBAAiB,EAAEE,cAAc,CAACF,iBAAf,GAAmC;IAFb,CAA7B,CAAd;EAID;;EAEDI,MAAM,GAAG;IACP;IACA,oBACE;MAAA,WACG,GADH,eAEE;QAAQ,OAAO,EAAE,KAAKR,WAAtB;QAAA,WACG,GADH,EAEG,KAAKE,KAAL,CAAWC,eAFd;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAME;QAAQ,OAAO,EAAE,KAAKH,WAAtB;QAAA,WACG,GADH,EAEG,KAAKE,KAAL,CAAWE,iBAFd,EAEiC,GAFjC;MAAA;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAaD;;AA5CyB;;AA+C5B,eAAeN,GAAf"},"metadata":{},"sourceType":"module"}